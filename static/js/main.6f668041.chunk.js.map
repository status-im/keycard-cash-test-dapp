{"version":3,"sources":["keycard.js","App.js","serviceWorker.js","index.js"],"names":["web3","ethereum","window","signRedeem","log","a","eth","net","getId","result","netID","parseInt","getAccounts","accounts","account","join","data","types","EIP712Domain","name","type","Redeem","primaryType","domain","version","chainId","verifyingContract","message","blockNumber","blockHash","code","receiver","request","method","params","JSON","stringify","sig","signer","recoverTypedSignature","signPayment","Payment","currency","to","amount","signGeneric","GenericMessage","from","text","App","useState","messages","setMessages","useCallback","console","forEach","p","time","Date","toLocaleDateString","hour","minute","second","scrollTo","document","body","scrollHeight","useEffect","enable","then","Web3","catch","err","init","className","onClick","event","preventDefault","map","m","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f668041.chunk.js","sourcesContent":["import { recoverTypedSignature } from 'eth-sig-util';\nimport Web3 from \"web3\";\nconst ethereum = window.ethereum;\nconst ROPSTEN = 3;\nlet web3;\n\nfunction paymentParams(chainId, amount) {\n  const message = {\n    blockNumber: 1,\n    blockHash: \"0x0000000000000000000000000000000000000000\",\n    currency: \"0xc55cf4b03948d7ebc8b9e8bad92643703811d162\",\n    to: \"0x0000000000000000000000000000000000000000\",\n    amount: \"1000000000000000000\",\n  }\n\n  const domain = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"chainId\", type: \"uint256\" },\n    { name: \"verifyingContract\", type: \"address\" }\n  ];\n\n  const payment = [\n    { name: \"blockNumber\", type: \"uint256\" },\n    { name: \"blockHash\", type: \"bytes32\" },\n    { name: \"currency\", type: \"address\" },\n    { name: \"amount\", type: \"uint256\" },\n    { name: \"to\", type: \"address\" }\n  ];\n\n  const domainData = {\n    name: \"KeycardWallet\",\n    version: \"1\",\n    chainId: chainId,\n    verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n  };\n\n  const data = {\n    types: {\n      EIP712Domain: domain,\n      Payment: payment\n    },\n    primaryType: \"Payment\",\n    domain: domainData,\n    message: message\n  };\n\n  return data;\n}\n\nfunction redeemParams(chainId, receiver) {\n  const message = {\n    blockNumber: 1,\n    blockHash: \"0x0000000000000000000000000000000000000000\",\n    code: \"0x0000000000000000000000000000000000000000\",\n    receiver: receiver,\n  }\n\n  const domain = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"chainId\", type: \"uint256\" },\n    { name: \"verifyingContract\", type: \"address\" }\n  ];\n\n  const redeem = [\n    { name: \"blockNumber\", type: \"uint256\" },\n    { name: \"blockHash\", type: \"bytes32\" },\n    { name: \"receiver\", type: \"address\" },\n    { name: \"code\", type: \"bytes32\" },\n  ];\n\n  const domainData = {\n    name: \"KeycardERC20Bucket\",\n    version: \"1\",\n    chainId: chainId,\n    verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n  };\n\n  const data = {\n    types: {\n      EIP712Domain: domain,\n      Redeem: redeem,\n    },\n    primaryType: \"Redeem\",\n    domain: domainData,\n    message: message\n  };\n\n  return data;\n}\n\nfunction genericParams(chainId) {\n  const message = {\n    from: \"Foo\",\n    to: \"Bar\",\n    text: \"Hello World\",\n  }\n\n  const domain = [\n    { name: \"name\", type: \"string\" },\n    { name: \"version\", type: \"string\" },\n    { name: \"chainId\", type: \"uint256\" },\n    { name: \"verifyingContract\", type: \"address\" }\n  ];\n\n  const genericMessage = [\n    { name: \"from\", type: \"string\" },\n    { name: \"to\", type: \"string\" },\n    { name: \"text\", type: \"string\" },\n  ];\n\n  const domainData = {\n    name: \"GenericMessage\",\n    version: \"1\",\n    chainId: chainId,\n    verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n  };\n\n  const data = {\n    types: {\n      EIP712Domain: domain,\n      GenericMessage: genericMessage\n    },\n    primaryType: \"GenericMessage\",\n    domain: domainData,\n    message: message\n  };\n\n  return data;\n}\n\nexport const init = (log) => {\n  if (ethereum) {\n    ethereum.enable().then(() => {\n      web3 = new Web3(ethereum);\n      log(\"ethereum enabled\");\n    }).catch(err => {\n      log(JSON.stringify(err.message));\n    });\n  }\n}\n\nexport const signRedeem = async (log) => {\n  try {\n    log(\"calling net_version\")\n    const result = await web3.eth.net.getId();\n    const netID = parseInt(result);\n    if (netID !== ROPSTEN) {\n      throw(\"you can use this test app only on ropsten\")\n      return\n    }\n\n    log(\"network id\", netID)\n    log(\"calling eth_accounts\")\n\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    log(\"accounts\", accounts.join(\", \"));\n    log(\"calling keycard_signTypedData\");\n\n    const data = redeemParams(netID, account);\n    const sig = await ethereum.request({\n      method: \"keycard_signTypedData\",\n      params: JSON.stringify(data)\n    });\n    log(\"signature: \", sig);\n\n    const signer = recoverTypedSignature({\n      data,\n      sig\n    });\n    log(\"signer: \", signer);\n  } catch(err) {\n    log(\"error\", err, err.message);\n  }\n}\n\nexport const signPayment = async (log) => {\n  try {\n    log(\"calling net_version\")\n    const result = await web3.eth.net.getId();\n    const netID = parseInt(result);\n    if (netID !== ROPSTEN) {\n      throw(\"you can use this test app only on ropsten\")\n      return\n    }\n\n    log(\"network id\", netID)\n    log(\"calling eth_accounts\")\n\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    log(\"accounts\", accounts.join(\", \"));\n    log(\"calling keycard_signTypedData\");\n\n    const amount = \"1000000000000000000\";\n    const data = paymentParams(netID, amount);\n    const sig = await ethereum.request({\n      method: \"keycard_signTypedData\",\n      params: JSON.stringify(data),\n    });\n    log(\"signature: \", sig);\n\n    const signer = recoverTypedSignature({\n      data,\n      sig\n    });\n    log(\"signer: \", signer);\n  } catch(err) {\n    log(\"error\", err, err.message);\n  }\n}\n\nexport const signGeneric = async (log) => {\n  try {\n    log(\"calling net_version\")\n    const result = await web3.eth.net.getId();\n    const netID = parseInt(result);\n    if (netID !== ROPSTEN) {\n      throw(\"you can use this test app only on ropsten\")\n      return\n    }\n\n    log(\"network id\", netID)\n    log(\"calling eth_accounts\")\n\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    log(\"accounts\", accounts.join(\", \"));\n    log(\"calling keycard_signTypedData\");\n\n    const data = genericParams(netID);\n    const sig = await ethereum.request({\n      method: \"keycard_signTypedData\",\n      params: JSON.stringify(data),\n    });\n    log(\"signature: \", sig);\n\n    const signer = recoverTypedSignature({\n      data,\n      sig\n    });\n    log(\"signer: \", signer);\n  } catch(err) {\n    log(\"error\", err, err.message);\n  }\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport './App.css';\nimport { init, signPayment, signRedeem, signGeneric } from \"./keycard\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  const log = useCallback(\n    (message, ...params) => {\n      let text = message;\n      console.log(message);\n\n      (params || []).forEach(p => {\n        if (p) {\n          text = `${text} ${JSON.stringify(p)}`\n        }\n        console.log(p);\n      })\n\n      setMessages(messages => [\n        ...messages,\n        {\n          time: new Date().toLocaleDateString('default', { hour: 'numeric', minute: 'numeric', second: 'numeric' }),\n          text: text,\n        },\n      ]);\n\n      window.scrollTo(0, document.body.scrollHeight);\n    },\n    [setMessages],\n  );\n\n  useEffect(() => {\n    init(log);\n  }, [log]);\n\n  const onSignPayment = (event) => {\n    event.preventDefault();\n    setMessages([]);\n    signPayment(log);\n  };\n\n  const onSignRedeem = (event) => {\n    event.preventDefault();\n    setMessages([]);\n    signRedeem(log);\n  };\n\n  const onSignGeneric = (event) => {\n    event.preventDefault();\n    setMessages([]);\n    signGeneric(log);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <button onClick={onSignPayment} className=\"btn\">\n          Sign Payment\n        </button>\n\n        <button onClick={onSignRedeem} className=\"btn\">\n          Sign Redeem\n        </button>\n\n        <button onClick={onSignGeneric} className=\"btn\">\n          Sign Generic\n        </button>\n      </div>\n      <div className=\"messages\">\n        {messages.map((m, key) => <div key={key} className=\"message\">\n          <div className=\"time\">{m.time}</div>\n          <div className=\"text\">{m.text}</div>\n        </div>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}